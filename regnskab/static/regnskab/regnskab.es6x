// vim:set ft=javascript sw=4 et:

class Cross extends React.Component {
    render() {
        return <div className='cross'>"&times;"</div>;
    }
}

class Crosses extends React.Component {
    render() {
        const crosses = [];
        for (let i = 0; i < this.props.count; ++i) crosses.push(<Cross key={i} />);
        return <div className='crosses'>{crosses}</div>;
    }
}

class ColumnEntry extends React.Component {
    getInputValue() {
        let st = this.state.inputValue;
        let v = this.props.value;
        if (parseFloat(st) === v) { return st; }
        else { return ''+v; }
    }
    render() {
        return <div className='column column-'+this.props.columnKind>
            <Crosses count={this.props.value} />
            <input className='column-entry' value={this.getInputValue()}
                   onChange={e => this.onChange(
        </div>;
    }
}

function init_react() {
    const participants = get_participants();
    const formelement = document.getElementById('id_participants').form;
    hide_all(participants.map(p => document.getElementById(`id_p${p.id}-locations`)));
    hide_all(participants.map(p => document.getElementById(`p${p.id}`)));
    hide(document.querySelector('.participants'));
    hide_all(document.querySelectorAll('.participant-name'));
    const event_form_div = document.createElement('div');
    event_form_div.className = 'event_form';
    formelement.insertBefore(event_form_div, formelement.firstChild);
    ReactDOM.render(<EventForm participants={participants} />, event_form_div);
}

window.addEventListener('load', init_react, false);
